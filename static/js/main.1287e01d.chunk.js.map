{"version":3,"sources":["components/Jumbo.js","components/ShowFlags.js","components/AddCountry.js","components/popUp.js","dbContent.js","App.js","serviceWorker.js","index.js"],"names":["Jumbo","react_default","a","createElement","className","ShowFlags","props","initialData","map","current","index","key","src","imgUrl","alt","style","maxHeight","countryName","capital","continent","population","errorMessage","role","AddCountry","data-toggle","href","aria-expanded","aria-controls","message","id","onSubmit","handleFormSubmit","htmlFor","type","name","placeholder","onChange","handleChange","value","flagData","required","defaultValue","error","PopUp","class","dbContent","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","setState","event","_event$target","target","theFlag","state","newFlag","preventDefault","currentData","console","log","unshift","document","getElementById","classList","toggle","added","showMessage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1287e01d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Jumbo() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid bg-dark text-white\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Flags of The World</h1>\n        <p className=\"lead\">\n          Check interesting information about countries all around the globe and\n          add your own!\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function ShowFlags(props) {\n  return (\n    <div className=\"container\">\n      <h1>Our Flags</h1>\n      <div className=\"row justify-content-center mb-5\">\n        {props.initialData.map((current, index) => {\n          return (\n            <div className=\"col-10 col-md-4 mb-3\" key={index}>\n              <div className=\"card\">\n                <img\n                  src={current.imgUrl}\n                  className=\"card-img-top\"\n                  alt=\"country flag\"\n                  style={{ maxHeight: \"236px\" }}\n                />\n                <div className=\"card-body\">\n                  <h4 className=\"card-title\">{current.countryName}</h4>\n                  <h5 className=\"card-text\">Capital</h5>\n                  <p className=\"card-text\">{current.capital}</p>\n                  <hr />\n                  <h5 className=\"card-text\">Continent</h5>\n                  <p className=\"card-text\">{current.continent}</p>\n                  <hr />\n                  <h5 className=\"card-text\">Population</h5>\n                  <p className=\"card-text\">{current.population}</p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst errorMessage = (\n  <div className=\"container\">\n    <div className=\"alert alert-danger\" role=\"alert\">\n      Please select a continent\n    </div>\n  </div>\n);\n\nexport default function AddCountry(props) {\n  return (\n    <div className=\"container\">\n      <p>\n        <a\n          className=\"btn btn-primary d-block\"\n          data-toggle=\"collapse\"\n          href=\"#addFlag\"\n          role=\"button\"\n          aria-expanded=\"false\"\n          aria-controls=\"addFlag\"\n        >\n          {props.message}\n        </a>\n      </p>\n      <div className=\"collapse\" id=\"addFlag\">\n        <form onSubmit={props.handleFormSubmit}>\n          <div className=\"form-row\">\n            <div className=\"form-group col-md-6\">\n              <label htmlFor=\"countryName\">Country Name</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"country-name\"\n                name=\"countryName\"\n                placeholder=\"e.g. Argentina\"\n                onChange={props.handleChange}\n                value={props.flagData.countryName}\n                required\n              />\n            </div>\n            <div className=\"form-group col-md-6\">\n              <label htmlFor=\"capital\">Capital</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"capital\"\n                name=\"capital\"\n                placeholder=\"e.g. Buenos Aires\"\n                onChange={props.handleChange}\n                value={props.flagData.capital}\n                required\n              />\n            </div>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"form-group col-md-6\">\n              <label htmlFor=\"continent\">Continent</label>\n              <select\n                id=\"continent\"\n                name=\"continent\"\n                className=\"form-control\"\n                onChange={props.handleChange}\n                value={props.flagData.continent || \"no-selected\"}\n                required\n              >\n                <option defaultValue value=\"no-selected\">\n                  Please Select One\n                </option>\n                <option value=\"africa\">Africa</option>\n                <option value=\"america\">America</option>\n                <option value=\"asia\">Asia</option>\n                <option value=\"australia\">Australia</option>\n                <option value=\"europe\">Europe</option>\n              </select>\n            </div>\n\n            <div className=\"form-group col-md-6\">\n              <label htmlFor=\"population\">Population</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"population\"\n                name=\"population\"\n                placeholder=\"e.g. 1,000,000\"\n                onChange={props.handleChange}\n                value={props.flagData.population}\n                required\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"imgUrl\">Image Url</label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"imgUrl\"\n              name=\"imgUrl\"\n              placeholder=\"www.myflag.com/flag.jpg\"\n              onChange={props.handleChange}\n              value={props.flagData.imgUrl}\n              required\n            />\n          </div>\n\n          {props.error ? errorMessage : null}\n          <button type=\"submit\" className=\"btn btn-success\">\n            Submit Flag\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function PopUp(props) {\n  return (\n    <div className=\"container\">\n      <div class=\"alert alert-success\" role=\"alert\">\n        {props.message}\n      </div>\n    </div>\n  );\n}\n","var dbContent = [\n  {\n    countryName: \"España\",\n    capital: \"Madrid\",\n    continent: \"Europa\",\n    population: \"46,397,452\",\n    imgUrl: \"img/flag-spain.png\"\n  },\n  {\n    countryName: \"China\",\n    capital: \"Pekín\",\n    continent: \"Asia\",\n    population: \"1,415,045,928\",\n    imgUrl: \"img/flag-china.png\"\n  },\n  {\n    countryName: \"México\",\n    capital: \"CDMX\",\n    continent: \"América\",\n    population: \"13,759,074\",\n    imgUrl: \"img/flag-mexico.png\"\n  },\n  {\n    countryName: \"Nigeria\",\n    capital: \"Abuya\",\n    continent: \"África\",\n    population: \"195,875,237\",\n    imgUrl: \"img/flag-nigeria.png\"\n  },\n  {\n    countryName: \"Australia\",\n    capital: \"Camberra\",\n    continent: \"Oceanía\",\n    population: \"24,772,247\",\n    imgUrl: \"img/flag-australia.png\"\n  }\n];\n\nexport default dbContent;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport Jumbo from \"./components/Jumbo\";\nimport ShowFlags from \"./components/ShowFlags\";\nimport AddCountry from \"./components/AddCountry\";\nimport PopUp from \"./components/popUp\";\n\nimport dbContent from \"./dbContent\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialData: [],\n      newFlag: {\n        countryName: \"\",\n        capital: \"\",\n        continent: \"\",\n        population: \"\",\n        imgUrl: \"\"\n      },\n      added: false,\n      error: false\n    };\n  }\n\n  componentWillMount = () => {\n    this.setState({ initialData: dbContent });\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    const theFlag = this.state.newFlag;\n    theFlag[name] = value;\n    this.setState({ newFlag: theFlag });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    let newFlag = this.state.newFlag;\n    let currentData = this.state.initialData;\n    console.log(newFlag);\n\n    if (newFlag.continent === \"no-selected\" || newFlag.continent === \"\") {\n      console.log(\"no slected\");\n      this.setState({\n        error: true\n      });\n    } else {\n      currentData.unshift(newFlag);\n\n      let box = document.getElementById(\"addFlag\");\n      box.classList.toggle(\"show\");\n\n      this.setState({\n        initialData: currentData,\n        newFlag: {\n          countryName: \"\",\n          capital: \"\",\n          continent: \"\",\n          population: \"\",\n          imgUrl: \"\"\n        },\n        added: true,\n        error: false\n      });\n    }\n  };\n\n  render() {\n    let showMessage = this.state.added;\n    return (\n      <div className=\"App\">\n        <Jumbo />\n        <AddCountry\n          handleChange={this.handleChange}\n          handleFormSubmit={this.handleFormSubmit}\n          flagData={this.state.newFlag}\n          message={showMessage ? \"Add another Flag!\" : \"Add a Flag\"}\n          error={this.state.error}\n        />\n        {showMessage ? <PopUp message={\"Your flag has been added\"} /> : null}\n        <ShowFlags initialData={this.state.initialData} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}